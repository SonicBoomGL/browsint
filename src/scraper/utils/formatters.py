# Contiene funzioni per formattare i dati per la presentazione (es. report HTML)

from datetime import datetime
from typing import Any, Dict, List, Optional
from colorama import Fore, Style
from urllib.parse import urlparse
from pathlib import Path
import re

# Palette di colori blu professionale
HEADER_BLUE = Fore.BLUE + Style.BRIGHT
SECTION_BLUE = Fore.CYAN + Style.BRIGHT
ACCENT_BLUE = Fore.LIGHTBLUE_EX
DATA_BLUE = Fore.BLUE
WARNING_BLUE = Fore.LIGHTCYAN_EX
TEXT_WHITE = Fore.WHITE + Style.BRIGHT
SEPARATOR_BLUE = Fore.CYAN + Style.DIM

def generate_html_report(self, profile: dict) -> str:
   
    '''
    Funzione: _generate_html_report
    Genera un report in formato HTML da un profilo OSINT (funzionalità placeholder).
    Parametri formali:
        self -> Riferimento all'istanza della classe
        dict profile -> Dizionario contenente i dati del profilo OSINT
    Valore di ritorno:
        str -> Una stringa contenente il codice HTML del report
    '''
    domain = profile.get("entity", {}).get("name", "N/A")

    html = f"""<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OSINT Report: {domain}</title>
    <style>
        body {{ font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 20px; background-color: #f4f7f6; color: #333; }}
        .container {{ max-width: 960px; margin: 20px auto; background-color: #fff; padding: 25px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
        .header {{ background-color: #005f73; color: white; padding: 20px; margin-bottom: 25px; border-radius: 5px; text-align: center; }}
        .section {{ background-color: #e9ecef; padding: 20px; margin-bottom: 20px; border-radius: 5px; border-left: 5px solid #0077b6; }}
        .section h2 {{ color: #005f73; margin-top: 0; border-bottom: 2px solid #ade8f4; padding-bottom: 10px; }}
        .label {{ font-weight: bold; color: #0077b6; min-width: 180px; display: inline-block; }}
        p {{ line-height: 1.6; }}
        ul {{ list-style-type: none; padding-left: 0; }}
        li {{ background-color: #fff; margin-bottom: 8px; padding: 10px; border-radius: 4px; border: 1px solid #dee2e6; }}
        .footer {{ margin-top: 30px; text-align: center; font-size: 0.9em; color: #6c757d; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>OSINT Profile Report</h1>
            <p>Target: {domain}</p>
            <p>Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        </div>
"""

    html += """
        <div class="footer">
            <p>Generated by OSINT Extractor Tool</p>
        </div>
    </div>
</body>
</html>
"""
    return html


def create_section_box(title: str, content_lines: list, min_width: int = 60) -> list:
    """Crea una sezione con box dinamico basato sul contenuto"""
    
    def strip_ansi_codes(text):
        ansi_escape = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
        return ansi_escape.sub('', text)
    
    # Larghezze standard per diversi tipi di sezioni
    STANDARD_WIDTH = 70  # Larghezza standard per la maggior parte delle sezioni
    WIDE_WIDTH = 140     # Larghezza per sezioni con contenuto lungo (es. DNS records)
    HEADER_WIDTH = 70    # Larghezza fissa per l'header principale
    
    # Calcola la larghezza massima necessaria del contenuto
    content_width = max([len(strip_ansi_codes(line)) for line in content_lines] + [0])
    
    # Determina la larghezza appropriata basata sul contenuto e il titolo
    if "RECORD DNS" in title or "PUNTI DI INTERESSE" in title:
        box_width = WIDE_WIDTH
    else:
        box_width = min(max(STANDARD_WIDTH, content_width + 4), WIDE_WIDTH)
    
    # Calcola padding per centrare il titolo
    title_padding = (box_width - len(title) - 2) // 2
    remaining_padding = box_width - title_padding - len(title) - 2
    title_line = f"{'━' * title_padding} {title} {'━' * remaining_padding}"
    
    result = []
    result.append(f"{SECTION_BLUE}┏{title_line}┓{Style.RESET_ALL}")
    
    for line in content_lines:
        # Calcola il padding necessario per allineare il contenuto
        content_length = len(strip_ansi_codes(line))
        padding = " " * (box_width - content_length)
        result.append(f"{line}{padding}")
    
    result.append(f"{SECTION_BLUE}┗{'━' * box_width}┛{Style.RESET_ALL}")
    return result


def format_domain_osint_report(data: Dict[str, Any], target_input: str, domain_analyzed: str, shodan_skipped: bool) -> str:
    """
    Formatta i dati OSINT di un dominio per un report testuale migliorato.

    Args:
        data: Dizionario contenente i dati grezzi raccolti (WHOIS, DNS, Shodan, etc.).
        target_input: L'input originale dell'utente (es. URL completo).
        domain_analyzed: Il dominio effettivo che è stato analizzato dopo la pulizia.
        shodan_skipped: Booleano che indica se la scansione Shodan è stata saltata.

    Returns:
        str: Il report testuale formattato.
    """
    report_parts = []
    HEADER_WIDTH = 70  # Larghezza fissa per l'header

    # Header principale con design migliorato
    report_parts.append(f"\n{HEADER_BLUE}{'╔' + '═' * (HEADER_WIDTH-2) + '╗'}{Style.RESET_ALL}")
    report_parts.append(f"{HEADER_BLUE}║ {TEXT_WHITE}{'🔍 ANALISI DOMINIO (OSINT ESTERNO)':^{HEADER_WIDTH-4}}{HEADER_BLUE} ║{Style.RESET_ALL}")
    report_parts.append(f"{HEADER_BLUE}{'╚' + '═' * (HEADER_WIDTH-2) + '╝'}{Style.RESET_ALL}\n")
    
    report_parts.append(f"{DATA_BLUE}┌─ Input Originale:{Style.RESET_ALL} {TEXT_WHITE}{target_input}{Style.RESET_ALL}")
    report_parts.append(f"{DATA_BLUE}└─ Dominio Analizzato:{Style.RESET_ALL} {TEXT_WHITE}{domain_analyzed.upper()}{Style.RESET_ALL}\n")

    # Riepilogo Rapido
    summary_content = []
    whois_data = data.get("whois", {})
    dns_data = data.get("dns", {})

    registrar = whois_data.get("registrar", "N/A")
    summary_content.append(f"{DATA_BLUE}  ▶ Registrar:{Style.RESET_ALL} {TEXT_WHITE}{registrar}{Style.RESET_ALL}")

    privacy_shield = "No"
    organization = whois_data.get("organization", "")
    if "contact privacy" in organization.lower() or "proxy" in organization.lower():
        privacy_shield = f"{TEXT_WHITE}Sì{Style.RESET_ALL} {Fore.CYAN}(Dettagli nascosti){Style.RESET_ALL}"
    else:
        privacy_shield = f"{TEXT_WHITE}No{Style.RESET_ALL}"
    summary_content.append(f"{DATA_BLUE}  ▶ Servizio di Privacy WHOIS:{Style.RESET_ALL} {privacy_shield}")

    creation_date_str = whois_data.get("creation_date")
    domain_age = "N/A"
    if creation_date_str:
        try:
            creation_date = datetime.fromisoformat(creation_date_str.replace('Z', '+00:00') if 'Z' in creation_date_str else creation_date_str)
            age_delta = datetime.now() - creation_date
            years = age_delta.days // 365
            months = (age_delta.days % 365) // 30
            domain_age = f"{TEXT_WHITE}{years} anni, {months} mesi{Style.RESET_ALL} {TEXT_WHITE}(Registrato il {creation_date.strftime('%d %b %Y')}{Style.RESET_ALL}){Style.RESET_ALL}"
        except ValueError:
            domain_age = f"{TEXT_WHITE}Errore parsing data: {creation_date_str}{Style.RESET_ALL}"
    summary_content.append(f"{DATA_BLUE}  ▶ Età Dominio:{Style.RESET_ALL} {domain_age}")

    name_servers = dns_data.get("NS", ["N/A"])
    summary_content.append(f"{DATA_BLUE}  ▶ Name Servers:{Style.RESET_ALL} {TEXT_WHITE}{', '.join(name_servers)}{Style.RESET_ALL}")

    a_records = dns_data.get("A", [])
    if a_records:
        summary_content.append(f"{DATA_BLUE}  ▶ IP Principali (A Records):{Style.RESET_ALL} {TEXT_WHITE}{', '.join(a_records)}{Style.RESET_ALL}")
    else:
        summary_content.append(f"{DATA_BLUE}  ▶ IP Principali (A Records):{Style.RESET_ALL} {Fore.RED}Nessuno trovato{Style.RESET_ALL}")

    mx_records = dns_data.get("MX", [])
    if mx_records:
        mx_display = mx_records[0].split(' ')[1] if mx_records[0] else 'N/A'
        extra_count = len(mx_records) - 1
        if extra_count > 0:
            mx_display += f" {Fore.CYAN}(+{extra_count} altri){Style.RESET_ALL}"
        summary_content.append(f"{DATA_BLUE}  ▶ Servizio Email (MX):{Style.RESET_ALL} {TEXT_WHITE}{mx_display}{Style.RESET_ALL}")
    else:
        summary_content.append(f"{DATA_BLUE}  ▶ Servizio Email (MX):{Style.RESET_ALL} {Fore.RED}Nessuno trovato{Style.RESET_ALL}")
    
    # Esempio di come usare create_section_box:
    report_parts.extend(create_section_box("RIEPILOGO RAPIDO", summary_content))
    report_parts.append("")

    # Informazioni WHOIS
    whois_content = []
    whois_content.append(f"{DATA_BLUE}  ┌─ Nome Dominio:{Style.RESET_ALL}      {TEXT_WHITE}{whois_data.get('domain_name', 'N/A').upper()}{Style.RESET_ALL}")
    whois_content.append(f"{DATA_BLUE}  ├─ Registrar:{Style.RESET_ALL}         {TEXT_WHITE}{whois_data.get('registrar', 'N/A')}{Style.RESET_ALL}")
    whois_content.append(f"{DATA_BLUE}  ├─ Data Creazione:{Style.RESET_ALL}    {TEXT_WHITE}{whois_data.get('creation_date', 'N/A')}{Style.RESET_ALL}")
    whois_content.append(f"{DATA_BLUE}  ├─ Data Scadenza:{Style.RESET_ALL}     {TEXT_WHITE}{whois_data.get('expiration_date', 'N/A')}{Style.RESET_ALL}")
    whois_content.append(f"{DATA_BLUE}  └─ Ultimo Aggiorn.:{Style.RESET_ALL}   {TEXT_WHITE}{whois_data.get('last_updated', 'N/A')}{Style.RESET_ALL}")
    
    status = whois_data.get("status", [])
    if status:
        whois_content.append(f"{DATA_BLUE}  ┌─ Stato Dominio:{Style.RESET_ALL}     {TEXT_WHITE}{', '.join(status)}{Style.RESET_ALL}")
        whois_content.append(f"{DATA_BLUE}  └─{Style.RESET_ALL} {Fore.CYAN}(Tipico per protezione da trasferimenti indesiderati){Style.RESET_ALL}")
    else:
        whois_content.append(f"{DATA_BLUE}  └─ Stato Dominio:{Style.RESET_ALL}     {Fore.RED}N/A{Style.RESET_ALL}")

    organization_display = whois_data.get('organization', 'N/A')
    if "contact privacy" in organization_display.lower() or "proxy" in organization_display.lower():
        organization_display = f"{organization_display} {Fore.CYAN}⚠️ (PRIVACY ATTIVA: Dettagli proprietario nascosti){Style.RESET_ALL}"
    whois_content.append(f"{DATA_BLUE}  └─ Organization:{Style.RESET_ALL}      {TEXT_WHITE}{organization_display}{Style.RESET_ALL}")

    emails = whois_data.get("emails", [])
    if emails:
        whois_content.append(f"{DATA_BLUE}  └─ Emails di Contatto WHOIS:{Style.RESET_ALL}")
        for i, email in enumerate(emails):
            prefix = "├─" if i < len(emails) - 1 else "└─"
            whois_content.append(f"{DATA_BLUE}     {prefix} {TEXT_WHITE}{email}{Style.RESET_ALL}")
    else:
        whois_content.append(f"{DATA_BLUE}  └─ Emails di Contatto WHOIS:{Style.RESET_ALL} {Fore.RED}Nessuna trovata{Style.RESET_ALL}")
    
    report_parts.extend(create_section_box("INFORMAZIONI WHOIS", whois_content))
    report_parts.append("")

    # Record DNS
    dns_content = []
    for record_type in ["A", "AAAA", "MX", "NS", "SOA", "TXT"]:
        records = dns_data.get(record_type, [])
        if records:
            dns_content.append(f"{DATA_BLUE}  ┌─ Record {record_type}:{Style.RESET_ALL}")
            for i, record in enumerate(records):
                prefix = "├─" if i < len(records) - 1 else "└─"
                dns_content.append(f"{DATA_BLUE}  │  {prefix} {TEXT_WHITE}{record}{Style.RESET_ALL}")
        else:
            dns_content.append(f"{DATA_BLUE}  └─ Record {record_type}:{Style.RESET_ALL} {Fore.RED}Nessuno trovato{Style.RESET_ALL}")
    
    report_parts.extend(create_section_box("RECORD DNS", dns_content))
    report_parts.append("")

    # Scansione Shodan
    shodan_content = []
    if shodan_skipped:
        shodan_content.append(f"{Fore.RED}  ⚠️  Scansione Shodan saltata dall'utente.{Style.RESET_ALL}")
        shodan_content.append(f"{Fore.RED}      Riprova e abilitala per dettagli su porte/servizi.{Style.RESET_ALL}")
    else:
        shodan_data = data.get("shodan", {})
        if shodan_data and shodan_data.get("hostnames"):
            shodan_content.append(f"{DATA_BLUE}  ┌─ IP:{Style.RESET_ALL} {TEXT_WHITE}{shodan_data.get('ip_str', 'N/A')}{Style.RESET_ALL}")
            shodan_content.append(f"{DATA_BLUE}  ├─ Organizzazione:{Style.RESET_ALL} {TEXT_WHITE}{shodan_data.get('org', 'N/A')}{Style.RESET_ALL}")
            shodan_content.append(f"{DATA_BLUE}  ├─ ISP:{Style.RESET_ALL} {TEXT_WHITE}{shodan_data.get('isp', 'N/A')}{Style.RESET_ALL}")
            shodan_content.append(f"{DATA_BLUE}  ├─ Paese:{Style.RESET_ALL} {TEXT_WHITE}{shodan_data.get('country_name', 'N/A')}{Style.RESET_ALL}")
            shodan_content.append(f"{DATA_BLUE}  └─ Porte Aperte e Servizi:{Style.RESET_ALL}")
            for i, port_info in enumerate(shodan_data.get('ports_info', [])):
                prefix = "├─" if i < len(shodan_data.get('ports_info', [])) - 1 else "└─"
                port = port_info.get('port', 'N/A')
                service = port_info.get('product', 'N/A')
                shodan_content.append(f"{DATA_BLUE}     {prefix} Porta: {TEXT_WHITE}{port}{Style.RESET_ALL}, Servizio: {TEXT_WHITE}{service}{Style.RESET_ALL}")
        else:
            shodan_content.append(f"{Fore.RED}  ❌ Nessun dato Shodan disponibile o host non trovato.{Style.RESET_ALL}")
    
    report_parts.extend(create_section_box("SCANSIONE SHODAN", shodan_content))
    report_parts.append("")

    # Punti di Interesse / Note
    notes_content = []
    if "contact privacy" in organization.lower() or "proxy" in organization.lower():
        notes_content.append(f"{Fore.CYAN}🔒 L'identità del registrante del dominio è nascosta tramite un servizio di privacy, rendendo più difficile l'attribuzione diretta.{Style.RESET_ALL}")
    if "wixdns.net" in str(name_servers).lower():
        notes_content.append(f"{Fore.CYAN}🌐 I Name Servers indicano che il sito è ospitato o gestito tramite la piattaforma Wix.com.{Style.RESET_ALL}")
    if a_records:
        notes_content.append(f"{Fore.CYAN}🖥️  Gli indirizzi IP ({TEXT_WHITE}{', '.join(a_records)} {Style.RESET_ALL} {Fore.CYAN}) sono associati a {TEXT_WHITE}Wix.com{Style.RESET_ALL}{Fore.CYAN}, confermando l'hosting.{Style.RESET_ALL}")
    if creation_date_str:
         notes_content.append(f"{Fore.CYAN}📅 Il dominio è attivo da {TEXT_WHITE}{domain_age.split('(')[0].strip()}{Fore.CYAN}, indicando una presenza consolidata.{Style.RESET_ALL}")
    if "TXT" in dns_data:
        for txt_rec in dns_data["TXT"]:
            if "spf" in txt_rec.lower():
                notes_content.append(f"{Fore.CYAN}📧 Il record SPF ({TEXT_WHITE}`{txt_rec}`{Fore.CYAN}) specifica i server autorizzati per l'invio di email, inclusi Wix e/o Aruba.{Style.RESET_ALL}")

    report_parts.extend(create_section_box("PUNTI DI INTERESSE / NOTE", notes_content))
    report_parts.append("")

    # Footer
    report_parts.append(f"{HEADER_BLUE}{'╚' + '═' * (HEADER_WIDTH-2) + '╝'}{Style.RESET_ALL}")
    return "\n".join(report_parts)


def format_page_analysis_report(url: str, parsed_data: Dict[str, Any], osint_data: Dict[str, Any], save_paths: Dict[str, Path]) -> str:
    """
    Formatta i risultati dell'analisi di una singola pagina web per un report testuale migliorato.

    Args:
        url: L'URL della pagina analizzata.
        parsed_data: I dati strutturati estratti dal parser (titolo, links, meta, ecc.).
        osint_data: I dati OSINT rilevati sulla pagina (email, telefoni, tecnologie).
        save_paths: Dizionario con i percorsi dove sono stati salvati i file (HTML, JSON).

    Returns:
        str: Il report testuale formattato.
    """
    report_parts = []
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    HEADER_WIDTH = 70  # Larghezza fissa per l'header

    # Header principale con design migliorato
    report_parts.append(f"\n{HEADER_BLUE}{'╔' + '═' * (HEADER_WIDTH-2) + '╗'}{Style.RESET_ALL}")
    report_parts.append(f"{HEADER_BLUE}║ {TEXT_WHITE}{'🌐 ANALISI LOCALE PAGINA WEB':^{HEADER_WIDTH-4}}{HEADER_BLUE} ║{Style.RESET_ALL}")
    report_parts.append(f"{HEADER_BLUE}{'╚' + '═' * (HEADER_WIDTH-2) + '╝'}{Style.RESET_ALL}\n")
    
    report_parts.append(f"{DATA_BLUE}┌─ URL Analizzato:{Style.RESET_ALL} {TEXT_WHITE}{url}{Style.RESET_ALL}")
    report_parts.append(f"{DATA_BLUE}└─ Data Analisi:{Style.RESET_ALL} {TEXT_WHITE}{timestamp}{Style.RESET_ALL}\n")

    # Informazioni Generali sulla Pagina
    general_content = []
    title = parsed_data.get("title", "N/A")
    description = parsed_data.get("description", "N/A")
    content_length = parsed_data.get("content_length", "N/A")
    lang_attr = parsed_data.get("lang", "N/A")
    canonical_url = parsed_data.get("canonical_url", "N/A")

    general_content.append(f"{DATA_BLUE}  ┌─ Titolo Pagina:{Style.RESET_ALL}     {TEXT_WHITE}{title}{Style.RESET_ALL}")
    
    desc_display = description if description and description != "N/A" else f"{TEXT_WHITE}Nessuna{Style.RESET_ALL} {Fore.CYAN}(potrebbe impattare SEO){Style.RESET_ALL}"
    general_content.append(f"{DATA_BLUE}  ├─ Meta Descrizione:{Style.RESET_ALL}  {TEXT_WHITE}{desc_display}{Style.RESET_ALL}")
    
    general_content.append(f"{DATA_BLUE}  ├─ URL Canonical:{Style.RESET_ALL}     {TEXT_WHITE}{canonical_url}{Style.RESET_ALL}")
    general_content.append(f"{DATA_BLUE}  ├─ Lingua (HTML):{Style.RESET_ALL}     {TEXT_WHITE}{lang_attr}{Style.RESET_ALL}")
    
    size_display = f"{TEXT_WHITE}{content_length} bytes{Style.RESET_ALL} {Fore.CYAN}(circa {round(content_length/1024, 2)} KB){Style.RESET_ALL}" if isinstance(content_length, int) else f"{TEXT_WHITE}N/A{Style.RESET_ALL}"
    general_content.append(f"{DATA_BLUE}  └─ Dimensione HTML:{Style.RESET_ALL}   {TEXT_WHITE}{size_display}{Style.RESET_ALL}")
    
    report_parts.extend(create_section_box("INFORMAZIONI GENERALI SULLA PAGINA", general_content))
    report_parts.append("")

    # Statistiche Link & Media
    stats_content = []
    internal_links = parsed_data.get("internal_links_count", 0)
    external_links = parsed_data.get("external_links_count", 0)
    image_count = parsed_data.get("image_count", 0)
    css_count = parsed_data.get("css_count", 0)
    js_count = parsed_data.get("js_count", 0)

    stats_content.append(f"{DATA_BLUE}  ┌─ Link Interni Trovati:{Style.RESET_ALL}     {TEXT_WHITE}{internal_links}{Style.RESET_ALL}")
    stats_content.append(f"{DATA_BLUE}  ├─ Link Esterni Trovati:{Style.RESET_ALL}     {TEXT_WHITE}{external_links}{Style.RESET_ALL}")
    stats_content.append(f"{DATA_BLUE}  ├─ Immagini Rilevate:{Style.RESET_ALL}        {TEXT_WHITE}{image_count}{Style.RESET_ALL}")
    stats_content.append(f"{DATA_BLUE}  ├─ Fogli di Stile (CSS):{Style.RESET_ALL}     {TEXT_WHITE}{css_count}{Style.RESET_ALL}")
    stats_content.append(f"{DATA_BLUE}  └─ Script (JS):{Style.RESET_ALL}              {TEXT_WHITE}{js_count}{Style.RESET_ALL}")
    
    report_parts.extend(create_section_box("STATISTICHE LINK & MEDIA", stats_content))
    report_parts.append("")

    # Dati di Contatto Estratti
    contacts_content = []
    emails = osint_data.get("emails", [])
    phones = osint_data.get("phone_numbers", [])
    domain = urlparse(url).netloc

    if emails:
        contacts_content.append(f"{DATA_BLUE}  ┌─ Emails Trovate:{Style.RESET_ALL}")
        for i, email in enumerate(emails):
            email_domain = email.split('@')[-1]
            status = f"{Fore.CYAN}(Interna al dominio){Style.RESET_ALL}" if email_domain == domain else f"{Fore.CYAN}(Esterna al dominio){Style.RESET_ALL}"
            prefix = "├─" if i < len(emails) - 1 else "└─"
            contacts_content.append(f"{DATA_BLUE}  │  {prefix} {TEXT_WHITE}{email}{Style.RESET_ALL} {status}")
    else:
        contacts_content.append(f"{DATA_BLUE}  ├─ Emails Trovate:{Style.RESET_ALL} {Fore.RED}Nessuna{Style.RESET_ALL}")

    if phones:
        contacts_content.append(f"{DATA_BLUE}  └─ Numeri di Telefono Trovati:{Style.RESET_ALL}")
        for i, phone in enumerate(phones):
            prefix = "├─" if i < len(phones) - 1 else "└─"
            contacts_content.append(f"{DATA_BLUE}     {prefix} {TEXT_WHITE}{phone}{Style.RESET_ALL}")
    else:
        contacts_content.append(f"{DATA_BLUE}  └─ Numeri di Telefono Trovati:{Style.RESET_ALL} {Fore.RED}Nessuno{Style.RESET_ALL}")

    report_parts.extend(create_section_box("DATI DI CONTATTO ESTRATTI", contacts_content))
    report_parts.append("")

    # Tecnologie & Configurazione Web
    tech_content = []
    technologies = osint_data.get("page_technologies", {})

    cms_framework = technologies.get("framework_cms", "Sconosciuto")
    tech_content.append(f"{WARNING_BLUE}  ┌─ CMS / Framework:{Style.RESET_ALL} {TEXT_WHITE}{cms_framework}{Style.RESET_ALL}")

    web_server = technologies.get("web_server", "Sconosciuto")
    tech_content.append(f"{WARNING_BLUE}  ├─ Web Server:{Style.RESET_ALL} {TEXT_WHITE}{web_server}{Style.RESET_ALL}")

    js_libraries = technologies.get("js_libraries", [])
    if js_libraries:
        tech_content.append(f"{WARNING_BLUE}  ├─ Librerie JavaScript:{Style.RESET_ALL} {TEXT_WHITE}{', '.join(js_libraries)}{Style.RESET_ALL}")
    else:
        tech_content.append(f"{WARNING_BLUE}  ├─ Librerie JavaScript:{Style.RESET_ALL} {Fore.RED}Nessuna rilevata{Style.RESET_ALL}")

    # Header di Sicurezza
    security_headers = technologies.get("security_headers", {})
    if security_headers:
        tech_content.append(f"{DATA_BLUE}  ├─ {Fore.CYAN}Header di Sicurezza HTTP:{Style.RESET_ALL}")
        for i, (header, value) in enumerate(security_headers.items()):
            explanation = ""
            if header.lower() == "strict-transport-security":
                explanation = f"{Fore.CYAN}(HSTS: Forza l'uso di HTTPS){Style.RESET_ALL}"
            elif header.lower() == "x-content-type-options":
                explanation = f"{Fore.CYAN}(Impedisce al browser di 'indovinare' il tipo MIME){Style.RESET_ALL}"
            
            prefix = "├─" if i < len(security_headers) - 1 else "└─"
            tech_content.append(f"{DATA_BLUE}  │  {prefix} {header}:{Style.RESET_ALL} {TEXT_WHITE}{value}{Style.RESET_ALL} {explanation}")
    else:
        tech_content.append(f"{DATA_BLUE}  ├─ Header di Sicurezza HTTP:{Style.RESET_ALL} {Fore.RED}Nessuno rilevato o significativo{Style.RESET_ALL}")

    # Meta Tags
    meta_tags = technologies.get("meta_tags", {})
    if meta_tags:
        tech_content.append(f"{DATA_BLUE}  ├─ {WARNING_BLUE}Meta Tags Rilevati:{Style.RESET_ALL}")
        
        standard_meta = {k: v for k, v in meta_tags.items() if not k.startswith(('og:', 'twitter:'))}
        if standard_meta:
            tech_content.append(f"{DATA_BLUE}  │  ┌─ {Fore.CYAN}Standard:{Style.RESET_ALL}")
            for i, (name, content) in enumerate(standard_meta.items()):
                prefix = "├─" if i < len(standard_meta) - 1 else "└─"
                tech_content.append(f"{DATA_BLUE}  │  │  {prefix} {name}:{Style.RESET_ALL} {TEXT_WHITE}{content}{Style.RESET_ALL}")

        og_meta = {k: v for k, v in meta_tags.items() if k.startswith('og:')}
        if og_meta:
            tech_content.append(f"{DATA_BLUE}  │  ├─ {Fore.CYAN}Open Graph (OGP):{Style.RESET_ALL}")
            for i, (name, content) in enumerate(og_meta.items()):
                prefix = "├─" if i < len(og_meta) - 1 else "└─"
                tech_content.append(f"{DATA_BLUE}  │  │  {prefix} {name}:{Style.RESET_ALL} {TEXT_WHITE}{content}{Style.RESET_ALL}")
        
        twitter_meta = {k: v for k, v in meta_tags.items() if k.startswith('twitter:')}
        if twitter_meta:
            tech_content.append(f"{DATA_BLUE}  │  └─ {Fore.CYAN}Twitter Card:{Style.RESET_ALL}")
            for i, (name, content) in enumerate(twitter_meta.items()):
                prefix = "├─" if i < len(twitter_meta) - 1 else "└─"
                tech_content.append(f"{DATA_BLUE}  │     {prefix} {name}:{Style.RESET_ALL} {TEXT_WHITE}{content}{Style.RESET_ALL}")
    else:
        tech_content.append(f"{DATA_BLUE}  ├─ Meta Tags Rilevati:{Style.RESET_ALL} {Fore.RED}Nessuno{Style.RESET_ALL}")

    analytics = technologies.get("analytics", "Nessuno")
    tech_content.append(f"{DATA_BLUE}  └─ Servizi di Analytics:{Style.RESET_ALL}  {TEXT_WHITE}{analytics}{Style.RESET_ALL}")

    report_parts.extend(create_section_box("TECNOLOGIE & CONFIGURAZIONE WEB", tech_content))
    report_parts.append("")

    # Percorsi di Salvataggio
    paths_content = []
    original_html_path = save_paths.get("original_html", "N/A")
    parsed_json_path = save_paths.get("parsed_json", "N/A")
    paths_content.append(f"{DATA_BLUE}  ┌─ HTML Originale:{Style.RESET_ALL}   {TEXT_WHITE}{original_html_path}{Style.RESET_ALL}")
    paths_content.append(f"{DATA_BLUE}  └─ Struttura JSON:{Style.RESET_ALL}   {TEXT_WHITE}{parsed_json_path}{Style.RESET_ALL}")
    
    report_parts.extend(create_section_box("PERCORSI DI SALVATAGGIO", paths_content))
    report_parts.append("")

    # Footer
    report_parts.append(f"{HEADER_BLUE}{'╚' + '═' * (HEADER_WIDTH-2) + '╝'}{Style.RESET_ALL}")
    return "\n".join(report_parts)